import { addUser, removeUser, getUser, getUsersFromRoom } from './clients/users.js';
import { createServer } from "http";
import { Server } from "socket.io";
import express from 'express';
import cors from 'cors';


const app = express();
const server = createServer(app);
const io = new Server(server, { cors: { origin: '*' } });


// middleware's
app.use(cors());
app.use(express.static('public'));
app.use('/fav.ico', express.static('public/fav.ico'));


// 1st) 🟩 From server side, 
// socket connection start from here...
// 🙄 all code run inside this function()
// when client hit into this server through URL 🔗 
// then we received realtime connection/disconnection
io.on('connection', (socket) => {

    console.log('Client Open App... ✅');

    // 1st) 🟨 event create | & | listener method present at client side
    // Client listen this event by .emit() method... at client side  
    socket.on('join', ({ name, room }, callback) => {

        // 1.1) 🟨 set user into users[array]
        const { error, user } = addUser({ id: socket.id, name, room })


        // 1.2) 🟨 if error happen terminate this function
        if (error) return callback(error);

        // 1.5) 🟨 join into chat room
        socket.join(user.room);

        // .emit() ==> all time listening events that generated from Client Side.
        // 1.3) 🟨 simple welcome message from admin... 
        // when any new user come to join into the chat room.
        socket.emit('message', { user: 'admin', text: `${user.name}, welcome to the room ${user.room}` })


        // 1.4) 🟨 broadcast => send the message everyone inside chat room...
        // but beside that specific user, who recently join into the chat room...
        socket.broadcast.to(user.room).emit('message', { user: 'admin', text: `${user.name}, has joined!` })

        io.to(user.room).emit('roomData', { room: user.room, users: getUsersFromRoom(user.room) });
        
        callback()
    });


    // send sms to ==> client
    socket.emit('demoTesting', 'Hello for server...');


    // 2nd) 🟨 creating events, that generated by USER as chat messages...
    // waiting for event happening, form Client side by the help of .emit() method.
    // get | receive message from client...
    socket.on('sendMessage', (message, callback) => {

        // 2.1) 🟨 get user id from socket.io system
        const user = getUser(socket.id);

        // 2.2) 🟨 specify the chat room name & send message with the sender name
        io.to(user?.room).emit('message', { user: user?.name, text: message });

        callback()
    })


    socket.on('disconnect', () => {
        console.log('Client Close App... ❌');
        const user = removeUser(socket.id);

        if (user) {
            io.to(user.room).emit('message', { user: 'Admin', text: `${user.name} has left.` });
            io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });
        }
    })
});



// Default welcome message at root/index page...
const welcomeMessage = (req, res) => {
    res.send(` 
    <head>
        <title>Server Start! ✔</title> 
        <link rel="icon" href="/fav.ico">
        <style>
            @import url('https://fonts.googleapis.com/css2family=Nunito&display=swap');

            body {
                text-align            : center;
                background-image      : url('server.gif');
                background-color      : #eee;
                background-repeat     : no-repeat;
                background-attachment : fixed;
                background-position   : center;
            }

            h1{
                width         : max-content;
                margin        : 50px auto 00px; 
                padding       : 20px 30px 24px;
                font-family   : 'Nunito', sans-serif;
                font-size     : 38px;
                color         : #111;
                border        : 1px solid black;
                border-radius : 3px;
            }
            span{
                color : #28b300;
            }

            img{
                width  : 850px;
                height : 850px;
            }
        </style>
    </head>

    <body>
        <h1> Chat App - Server run at port <span>${PORT}</span> </h1>
    </body>
    `).status(200);
}
app.get('/', welcomeMessage);



const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
    console.log('Server is running at port', PORT, '✅');
})